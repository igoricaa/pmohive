/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type DividerBlock = {
  _type: "dividerBlock";
  height: number;
};

export type SpacerBlock = {
  _type: "spacerBlock";
  height: number;
};

export type TextGridItem = {
  _type: "textGridItem";
  heading?: {
    subtitle?: Subtitle;
    highlightedText?: string;
    text: string;
    level: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
    alignment: "start" | "center" | "end";
  };
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote" | "highlighted";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  indicatorType?: "number" | "icon";
  number?: string;
  icon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
  };
};

export type TextGridBlock = {
  _type: "textGridBlock";
  heading?: {
    subtitle?: Subtitle;
    highlightedText?: string;
    text: string;
    level: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
    alignment: "start" | "center" | "end";
  };
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote" | "highlighted";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  items: Array<{
    _key: string;
  } & TextGridItem>;
};

export type ImageBlock = {
  _type: "imageBlock";
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
  };
  subtitle?: string;
  aspectRatio?: {
    width: number;
    height: number;
  };
};

export type TextareaBlock = {
  _type: "textareaBlock";
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote" | "highlighted";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type HeadingTextBlock = {
  _type: "headingTextBlock";
  heading: {
    subtitle?: Subtitle;
    highlightedText?: string;
    text: string;
    level: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
    alignment: "start" | "center" | "end";
  };
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote" | "highlighted";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type HeadingBlock = {
  _type: "headingBlock";
  heading: {
    subtitle?: Subtitle;
    highlightedText?: string;
    text: string;
    level: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
    alignment: "start" | "center" | "end";
  };
};

export type CaseStudy = {
  _id: string;
  _type: "caseStudy";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  mainInfo: {
    title: string;
    client: string;
    projectDescription: string;
    featuredImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
  };
  slug: Slug;
  content?: Array<{
    _key: string;
  } & HeadingBlock | {
    _key: string;
  } & HeadingTextBlock | {
    _key: string;
  } & TextareaBlock | {
    _key: string;
  } & ImageBlock | {
    _key: string;
  } & TextGridBlock | {
    _key: string;
  } & SpacerBlock | {
    _key: string;
  } & DividerBlock>;
  blog: BlogSection;
};

export type CareersPage = {
  _id: string;
  _type: "careersPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  introSection: IntroSection;
  openPositions: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "openPosition";
  }>;
};

export type OpenPosition = {
  _id: string;
  _type: "openPosition";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  location: string;
  type: string;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote" | "highlighted";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote" | "highlighted";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  subtitle?: Subtitle;
  title: string;
  slug: Slug;
  category: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "postCategory";
  };
  date: string;
  content: BlockContent;
  excerpt?: BlockContent;
  featuredMedia: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type PostCategory = {
  _id: string;
  _type: "postCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  featuredImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
  };
  content: BlockContent;
};

export type Service = {
  _id: string;
  _type: "service";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  excerpt: string;
  header: {
    featuredImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
    subtitle: Subtitle;
    heading: string;
    description: BlockContent;
  };
  challenge: {
    subtitle: Subtitle;
    heading: string;
    description: BlockContent;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
  };
  role: {
    subtitle: Subtitle;
    description: string;
  };
  approach: {
    subtitle: Subtitle;
    heading: string;
    steps: Array<{
      step: string;
      _key: string;
    }>;
  };
  highlightedText: string;
  infoSection: {
    subtitle: Subtitle;
    heading: string;
    description: BlockContent;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
  };
  proofPoint: {
    subtitle: Subtitle;
    description: Array<{
      description: string;
      _key: string;
    }>;
  };
  ctaSection: BreakSection;
};

export type TeamMember = {
  _id: string;
  _type: "teamMember";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
  };
  specializations: Array<string>;
  bio: BlockContent;
};

export type Button = {
  _type: "button";
  text: string;
  highlightedText?: string;
  link: string;
  variant: "default" | "secondary";
  icon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type TermsOfUse = {
  _id: string;
  _type: "termsOfUse";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  lastUpdated: string;
  version: string;
  termlyEmbedUrl?: string;
  introContent?: BlockContent;
  content: BlockContent;
};

export type CookiePolicy = {
  _id: string;
  _type: "cookiePolicy";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  lastUpdated: string;
  version: string;
  termlyEmbedUrl?: string;
  introContent?: BlockContent;
  content: BlockContent;
};

export type PrivacyPolicy = {
  _id: string;
  _type: "privacyPolicy";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  lastUpdated: string;
  version: string;
  termlyEmbedUrl?: string;
  introContent?: BlockContent;
  content: BlockContent;
};

export type ContactPage = {
  _id: string;
  _type: "contactPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  subtitle: Subtitle;
  heading: string;
  description: BlockContent;
};

export type Subtitle = {
  _type: "subtitle";
  text: string;
  highlightedText?: string;
};

export type AboutPage = {
  _id: string;
  _type: "aboutPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  introSection: IntroSection;
  animatedTextPart1: string;
  animatedTextPart2: string;
  break: BreakSection;
  team: TeamSection;
  approachSection: ApproachSection;
  visionSection: VisionSection;
  blog: BlogSection;
};

export type VisionSection = {
  _type: "visionSection";
  subtitle: Subtitle;
  description: BlockContent;
  backgroundImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
  };
};

export type ApproachSection = {
  _type: "approachSection";
  subtitle: Subtitle;
  heading: string;
  items: Array<{
    icon: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
    title: string;
    description: string;
    _type: "approachItem";
    _key: string;
  }>;
};

export type IntroSection = {
  _type: "introSection";
  subtitle: Subtitle;
  heading: string;
  buttons?: Array<{
    _key: string;
  } & Button>;
  backgroundImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
  };
};

export type HomePage = {
  _id: string;
  _type: "homePage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  hero: HeroSection;
  about: AboutSection;
  team: TeamSection;
  blog: BlogSection;
  pmoPromo: BreakSection;
};

export type BreakSection = {
  _type: "breakSection";
  subtitle: Subtitle;
  heading: string;
  description?: BlockContent;
  backgroundImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
  };
  buttons: Array<{
    _key: string;
  } & Button>;
};

export type BlogSection = {
  _type: "blogSection";
  subtitle: Subtitle;
  heading: string;
  description: BlockContent;
  button: Button;
};

export type TeamSection = {
  _type: "teamSection";
  subtitle: Subtitle;
  heading: string;
  description: BlockContent;
  button?: Button;
  teamMembers: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "teamMember";
  }>;
};

export type AboutSection = {
  _type: "aboutSection";
  heading: {
    text: string;
    highlightedText: string;
  };
  animatedText: string;
  services: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "service";
  }>;
  stats: Array<{
    statTitle: string;
    statValue?: string;
    statIcon?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    statDescription: BlockContent;
    _key: string;
  }>;
  wrapUpText: string;
  weAreSection: {
    heading: string;
    highlightedText: string;
    description: BlockContent;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
  };
};

export type HeroSection = {
  _type: "heroSection";
  subtitle: Subtitle;
  heading: string;
  description: string;
  buttons: Array<{
    _key: string;
  } & Button>;
  images: {
    image1: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
    image2: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
    image3: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
    image4: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
  };
};

export type GeneralInfo = {
  _id: string;
  _type: "generalInfo";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  logoFull: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
  };
  logoMark?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
  };
  email: string;
  phone: string;
  googleMapCoordinates: Geopoint;
  socials?: Array<{
    title: string;
    url: string;
    icon: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
    _key: string;
  }>;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height: number;
  width: number;
  aspectRatio: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x: number;
  y: number;
  height: number;
  width: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top: number;
  bottom: number;
  left: number;
  right: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = DividerBlock | SpacerBlock | TextGridItem | TextGridBlock | ImageBlock | TextareaBlock | HeadingTextBlock | HeadingBlock | CaseStudy | CareersPage | OpenPosition | BlockContent | Post | PostCategory | Project | Service | TeamMember | Button | TermsOfUse | CookiePolicy | PrivacyPolicy | ContactPage | Subtitle | AboutPage | VisionSection | ApproachSection | IntroSection | HomePage | BreakSection | BlogSection | TeamSection | AboutSection | HeroSection | GeneralInfo | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: HOME_PAGE_QUERY
// Query: {    "homePage": *[_type == "homePage"][0] {      ...,      team {        ...,        teamMembers[]->      },      about {        ...,        services[]-> {          header {            subtitle {              text,              highlightedText            },            heading,            featuredImage {              ...,              alt            }          },          excerpt,        }      }    }  }
export type HOME_PAGE_QUERYResult = {
  homePage: {
    _id: string;
    _type: "homePage";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title: string;
    hero: HeroSection;
    about: {
      _type: "aboutSection";
      heading: {
        text: string;
        highlightedText: string;
      };
      animatedText: string;
      services: Array<{
        header: {
          subtitle: {
            text: string;
            highlightedText: string | null;
          };
          heading: string;
          featuredImage: {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            media?: unknown;
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            alt: string;
            _type: "image";
          };
        };
        excerpt: string;
      }>;
      stats: Array<{
        statTitle: string;
        statValue?: string;
        statIcon?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
        };
        statDescription: BlockContent;
        _key: string;
      }>;
      wrapUpText: string;
      weAreSection: {
        heading: string;
        highlightedText: string;
        description: BlockContent;
        image: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt: string;
          _type: "image";
        };
      };
    };
    team: {
      _type: "teamSection";
      subtitle: Subtitle;
      heading: string;
      description: BlockContent;
      button?: Button;
      teamMembers: Array<{
        _id: string;
        _type: "teamMember";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        name: string;
        image: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt: string;
          _type: "image";
        };
        specializations: Array<string>;
        bio: BlockContent;
      }>;
    };
    blog: BlogSection;
    pmoPromo: BreakSection;
  } | null;
};
// Variable: LATEST_POSTS_QUERY
// Query: *[_type == "post"] | order(_createdAt desc) [0...$limit] {  title,  "slug": slug.current,  excerpt,  featuredMedia,  date,}
export type LATEST_POSTS_QUERYResult = Array<{
  title: string;
  slug: string;
  excerpt: BlockContent | null;
  featuredMedia: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  date: string;
}>;
// Variable: GENERAL_INFO_QUERY
// Query: {  "generalInfo": *[_type == "generalInfo"][0],}
export type GENERAL_INFO_QUERYResult = {
  generalInfo: {
    _id: string;
    _type: "generalInfo";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    logoFull: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
    logoMark?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
    email: string;
    phone: string;
    googleMapCoordinates: Geopoint;
    socials?: Array<{
      title: string;
      url: string;
      icon: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt: string;
        _type: "image";
      };
      _key: string;
    }>;
  } | null;
};
// Variable: BLOG_POSTS_QUERY
// Query: *[_type == "post"    && (!defined($search) || title match $search + "*")    && (!defined($category) || category._ref == $category)  ] | order(date desc) [0...11] {    _id,    title,    "slug": slug.current,    excerpt,    featuredMedia,    date,    category->{      _id,      name,      "slug": slug.current    }  }
export type BLOG_POSTS_QUERYResult = Array<{
  _id: string;
  title: string;
  slug: string;
  excerpt: BlockContent | null;
  featuredMedia: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  date: string;
  category: {
    _id: string;
    name: string;
    slug: string;
  };
}>;
// Variable: BLOG_POSTS_QUERY_ASC
// Query: *[_type == "post"    && (!defined($search) || title match $search + "*")    && (!defined($category) || category._ref == $category)  ] | order(date asc) [0...11] {    _id,    title,    "slug": slug.current,    excerpt,    featuredMedia,    date,    category->{      _id,      name,      "slug": slug.current    }  }
export type BLOG_POSTS_QUERY_ASCResult = Array<{
  _id: string;
  title: string;
  slug: string;
  excerpt: BlockContent | null;
  featuredMedia: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  date: string;
  category: {
    _id: string;
    name: string;
    slug: string;
  };
}>;
// Variable: POST_CATEGORIES_QUERY
// Query: *[_type == "postCategory"] | order(name asc) {    _id,    name,    "slug": slug.current  }
export type POST_CATEGORIES_QUERYResult = Array<{
  _id: string;
  name: string;
  slug: string;
}>;
// Variable: POST_QUERY
// Query: {  "currentPost": *[_type == "post" && slug.current == $slug][0]{    _id,    title,    subtitle {      text,      highlightedText    },    "slug": slug.current,    date,    content,    excerpt,    featuredMedia,  },  "relatedPosts": *[    _type == "post"     && slug.current != $slug  ] | order(date desc)[0...3]{    _id,    title,    "slug": slug.current,    excerpt,    date,    featuredMedia  }}
export type POST_QUERYResult = {
  currentPost: {
    _id: string;
    title: string;
    subtitle: {
      text: string;
      highlightedText: string | null;
    } | null;
    slug: string;
    date: string;
    content: BlockContent;
    excerpt: BlockContent | null;
    featuredMedia: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  } | null;
  relatedPosts: Array<{
    _id: string;
    title: string;
    slug: string;
    excerpt: BlockContent | null;
    date: string;
    featuredMedia: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  }>;
};
// Variable: POSTS_QUERY_WITH_SLUGS
// Query: *[_type == "post"]{  slug}
export type POSTS_QUERY_WITH_SLUGSResult = Array<{
  slug: Slug;
}>;
// Variable: SERVICES_QUERY
// Query: *[_type == "service"]
export type SERVICES_QUERYResult = Array<{
  _id: string;
  _type: "service";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  excerpt: string;
  header: {
    featuredImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
    subtitle: Subtitle;
    heading: string;
    description: BlockContent;
  };
  challenge: {
    subtitle: Subtitle;
    heading: string;
    description: BlockContent;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
  };
  role: {
    subtitle: Subtitle;
    description: string;
  };
  approach: {
    subtitle: Subtitle;
    heading: string;
    steps: Array<{
      step: string;
      _key: string;
    }>;
  };
  highlightedText: string;
  infoSection: {
    subtitle: Subtitle;
    heading: string;
    description: BlockContent;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
  };
  proofPoint: {
    subtitle: Subtitle;
    description: Array<{
      description: string;
      _key: string;
    }>;
  };
  ctaSection: BreakSection;
}>;
// Variable: SERVICES_QUERY_WITH_SLUGS
// Query: *[_type == "service"]{  slug}
export type SERVICES_QUERY_WITH_SLUGSResult = Array<{
  slug: Slug;
}>;
// Variable: CONTACT_PAGE_QUERY
// Query: {  "contactPage": *[_type == "contactPage"][0]}
export type CONTACT_PAGE_QUERYResult = {
  contactPage: {
    _id: string;
    _type: "contactPage";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    subtitle: Subtitle;
    heading: string;
    description: BlockContent;
  } | null;
};
// Variable: ABOUT_PAGE_QUERY
// Query: {  "aboutPage": *[_type == "aboutPage"][0] {    ...,    team {      ...,      teamMembers[]->    },    approachSection {      ...,      approachItems[]->    },    visionSection {      ...,      visionItems[]->    },  }}
export type ABOUT_PAGE_QUERYResult = {
  aboutPage: {
    _id: string;
    _type: "aboutPage";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title: string;
    introSection: IntroSection;
    animatedTextPart1: string;
    animatedTextPart2: string;
    break: BreakSection;
    team: {
      _type: "teamSection";
      subtitle: Subtitle;
      heading: string;
      description: BlockContent;
      button?: Button;
      teamMembers: Array<{
        _id: string;
        _type: "teamMember";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        name: string;
        image: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt: string;
          _type: "image";
        };
        specializations: Array<string>;
        bio: BlockContent;
      }>;
    };
    approachSection: {
      _type: "approachSection";
      subtitle: Subtitle;
      heading: string;
      items: Array<{
        icon: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt: string;
          _type: "image";
        };
        title: string;
        description: string;
        _type: "approachItem";
        _key: string;
      }>;
      approachItems: null;
    };
    visionSection: {
      _type: "visionSection";
      subtitle: Subtitle;
      description: BlockContent;
      backgroundImage: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt: string;
        _type: "image";
      };
      visionItems: null;
    };
    blog: BlogSection;
  } | null;
};
// Variable: CAREERS_PAGE_QUERY
// Query: {  "careersPage": *[_type == "careersPage"][0] {    ...,    openPositions[]->  }}
export type CAREERS_PAGE_QUERYResult = {
  careersPage: {
    _id: string;
    _type: "careersPage";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title: string;
    introSection: IntroSection;
    openPositions: Array<{
      _id: string;
      _type: "openPosition";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title: string;
      location: string;
      type: string;
      description: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "highlighted" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      } | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }>;
    }>;
  } | null;
};
// Variable: SERVICE_QUERY
// Query: {  "currentService": *[_type == "service" && slug.current == $slug][0]}
export type SERVICE_QUERYResult = {
  currentService: {
    _id: string;
    _type: "service";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title: string;
    slug: Slug;
    excerpt: string;
    header: {
      featuredImage: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt: string;
        _type: "image";
      };
      subtitle: Subtitle;
      heading: string;
      description: BlockContent;
    };
    challenge: {
      subtitle: Subtitle;
      heading: string;
      description: BlockContent;
      image: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt: string;
        _type: "image";
      };
    };
    role: {
      subtitle: Subtitle;
      description: string;
    };
    approach: {
      subtitle: Subtitle;
      heading: string;
      steps: Array<{
        step: string;
        _key: string;
      }>;
    };
    highlightedText: string;
    infoSection: {
      subtitle: Subtitle;
      heading: string;
      description: BlockContent;
      image: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt: string;
        _type: "image";
      };
    };
    proofPoint: {
      subtitle: Subtitle;
      description: Array<{
        description: string;
        _key: string;
      }>;
    };
    ctaSection: BreakSection;
  } | null;
};
// Variable: CASE_STUDY_QUERY
// Query: {  "caseStudy": *[_type == "caseStudy" && slug.current == $slug][0]}
export type CASE_STUDY_QUERYResult = {
  caseStudy: {
    _id: string;
    _type: "caseStudy";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    mainInfo: {
      title: string;
      client: string;
      projectDescription: string;
      featuredImage: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt: string;
        _type: "image";
      };
    };
    slug: Slug;
    content?: Array<{
      _key: string;
    } & DividerBlock | {
      _key: string;
    } & HeadingBlock | {
      _key: string;
    } & HeadingTextBlock | {
      _key: string;
    } & ImageBlock | {
      _key: string;
    } & SpacerBlock | {
      _key: string;
    } & TextareaBlock | {
      _key: string;
    } & TextGridBlock>;
    blog: BlogSection;
  } | null;
};
// Variable: CASE_STUDIES_QUERY_WITH_SLUGS
// Query: *[_type == "caseStudy"]{  slug}
export type CASE_STUDIES_QUERY_WITH_SLUGSResult = Array<{
  slug: Slug;
}>;
// Variable: CASE_STUDIES_QUERY
// Query: *[_type == "caseStudy"] {  mainInfo {    title,    featuredImage {    ...,    alt    },  },}
export type CASE_STUDIES_QUERYResult = Array<{
  mainInfo: {
    title: string;
    featuredImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string;
      _type: "image";
    };
  };
}>;
// Variable: PRIVACY_POLICY_QUERY
// Query: {  "privacyPolicy": *[_type == "privacyPolicy"][0] {    title,    "slug": slug.current,    lastUpdated,    version,    termlyEmbedUrl,    introContent,    content  }}
export type PRIVACY_POLICY_QUERYResult = {
  privacyPolicy: {
    title: string;
    slug: string;
    lastUpdated: string;
    version: string;
    termlyEmbedUrl: string | null;
    introContent: BlockContent | null;
    content: BlockContent;
  } | null;
};
// Variable: COOKIE_POLICY_QUERY
// Query: {  "cookiePolicy": *[_type == "cookiePolicy"][0] {    title,    "slug": slug.current,    lastUpdated,    version,    termlyEmbedUrl,    introContent,    content  }}
export type COOKIE_POLICY_QUERYResult = {
  cookiePolicy: {
    title: string;
    slug: string;
    lastUpdated: string;
    version: string;
    termlyEmbedUrl: string | null;
    introContent: BlockContent | null;
    content: BlockContent;
  } | null;
};
// Variable: TERMS_OF_USE_QUERY
// Query: {  "termsOfUse": *[_type == "termsOfUse"][0] {    title,    "slug": slug.current,    lastUpdated,    version,    termlyEmbedUrl,    introContent,    content  }}
export type TERMS_OF_USE_QUERYResult = {
  termsOfUse: {
    title: string;
    slug: string;
    lastUpdated: string;
    version: string;
    termlyEmbedUrl: string | null;
    introContent: BlockContent | null;
    content: BlockContent;
  } | null;
};

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "{\n    \"homePage\": *[_type == \"homePage\"][0] {\n      ...,\n      team {\n        ...,\n        teamMembers[]->\n      },\n      about {\n        ...,\n        services[]-> {\n          header {\n            subtitle {\n              text,\n              highlightedText\n            },\n            heading,\n            featuredImage {\n              ...,\n              alt\n            }\n          },\n          excerpt,\n        }\n      }\n    }\n  }": HOME_PAGE_QUERYResult;
    "*[_type == \"post\"] | order(_createdAt desc) [0...$limit] {\n  title,\n  \"slug\": slug.current,\n  excerpt,\n  featuredMedia,\n  date,\n}": LATEST_POSTS_QUERYResult;
    "{\n  \"generalInfo\": *[_type == \"generalInfo\"][0],\n}": GENERAL_INFO_QUERYResult;
    "\n  *[_type == \"post\"\n    && (!defined($search) || title match $search + \"*\")\n    && (!defined($category) || category._ref == $category)\n  ] | order(date desc) [0...11] {\n    _id,\n    title,\n    \"slug\": slug.current,\n    excerpt,\n    featuredMedia,\n    date,\n    category->{\n      _id,\n      name,\n      \"slug\": slug.current\n    }\n  }\n": BLOG_POSTS_QUERYResult;
    "\n  *[_type == \"post\"\n    && (!defined($search) || title match $search + \"*\")\n    && (!defined($category) || category._ref == $category)\n  ] | order(date asc) [0...11] {\n    _id,\n    title,\n    \"slug\": slug.current,\n    excerpt,\n    featuredMedia,\n    date,\n    category->{\n      _id,\n      name,\n      \"slug\": slug.current\n    }\n  }\n": BLOG_POSTS_QUERY_ASCResult;
    "\n  *[_type == \"postCategory\"] | order(name asc) {\n    _id,\n    name,\n    \"slug\": slug.current\n  }\n": POST_CATEGORIES_QUERYResult;
    "{\n  \"currentPost\": *[_type == \"post\" && slug.current == $slug][0]{\n    _id,\n    title,\n    subtitle {\n      text,\n      highlightedText\n    },\n    \"slug\": slug.current,\n    date,\n    content,\n    excerpt,\n    featuredMedia,\n  },\n  \"relatedPosts\": *[\n    _type == \"post\" \n    && slug.current != $slug\n  ] | order(date desc)[0...3]{\n    _id,\n    title,\n    \"slug\": slug.current,\n    excerpt,\n    date,\n    featuredMedia\n  }\n}": POST_QUERYResult;
    "*[_type == \"post\"]{\n  slug\n}": POSTS_QUERY_WITH_SLUGSResult;
    "*[_type == \"service\"]": SERVICES_QUERYResult;
    "*[_type == \"service\"]{\n  slug\n}": SERVICES_QUERY_WITH_SLUGSResult;
    "{\n  \"contactPage\": *[_type == \"contactPage\"][0]\n}": CONTACT_PAGE_QUERYResult;
    "{\n  \"aboutPage\": *[_type == \"aboutPage\"][0] {\n    ...,\n    team {\n      ...,\n      teamMembers[]->\n    },\n    approachSection {\n      ...,\n      approachItems[]->\n    },\n    visionSection {\n      ...,\n      visionItems[]->\n    },\n  }\n}": ABOUT_PAGE_QUERYResult;
    "{\n  \"careersPage\": *[_type == \"careersPage\"][0] {\n    ...,\n    openPositions[]->\n  }\n}": CAREERS_PAGE_QUERYResult;
    "{\n  \"currentService\": *[_type == \"service\" && slug.current == $slug][0]\n}": SERVICE_QUERYResult;
    "{\n  \"caseStudy\": *[_type == \"caseStudy\" && slug.current == $slug][0]\n}": CASE_STUDY_QUERYResult;
    "*[_type == \"caseStudy\"]{\n  slug\n}": CASE_STUDIES_QUERY_WITH_SLUGSResult;
    "*[_type == \"caseStudy\"] {\n  mainInfo {\n    title,\n    featuredImage {\n    ...,\n    alt\n    },\n  },\n}": CASE_STUDIES_QUERYResult;
    "{\n  \"privacyPolicy\": *[_type == \"privacyPolicy\"][0] {\n    title,\n    \"slug\": slug.current,\n    lastUpdated,\n    version,\n    termlyEmbedUrl,\n    introContent,\n    content\n  }\n}": PRIVACY_POLICY_QUERYResult;
    "{\n  \"cookiePolicy\": *[_type == \"cookiePolicy\"][0] {\n    title,\n    \"slug\": slug.current,\n    lastUpdated,\n    version,\n    termlyEmbedUrl,\n    introContent,\n    content\n  }\n}": COOKIE_POLICY_QUERYResult;
    "{\n  \"termsOfUse\": *[_type == \"termsOfUse\"][0] {\n    title,\n    \"slug\": slug.current,\n    lastUpdated,\n    version,\n    termlyEmbedUrl,\n    introContent,\n    content\n  }\n}": TERMS_OF_USE_QUERYResult;
  }
}
